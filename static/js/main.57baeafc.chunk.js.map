{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","renderPopNamesPosts","a","fetch","then","response","json","data","catch","err","console","log","popCountryNames","setState","popCountryNamesData","body","countries","renderCovidPosts","Countries","covidAllData","map","item","getPopulationByName","name","Country","state","n","startsWith","populationByName","res","pop","population","push","buildpreDefaultCountrys","selectCountry","event","length","target","value","preDefaultCountrys","some","pre","preDefaultCountrysNames","preItem","removeCountry","filter","str","tableBody","index","TotalConfirmed","TotalRecovered","TotalDeaths","toFixed","allCountries","Button","className","onClick","buildClassName","values","this","onChange","disabled","class","type","id","for","Table","responsive","undefined","colSpan","click","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.57baeafc.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Table from 'react-bootstrap/Table';\nimport { Button } from 'react-bootstrap';\n\n// import RatingStats from './components/chart'\n\n\nclass App extends Component {\n\n\n  //1ยบ\n  constructor(props) {\n    super(props);\n    this.state = {\n      covidAllData: [],\n      popCountryNamesData: [],\n      preDefaultCountrysNames: ['Portugal', 'Spain', 'Brazil', 'United States of America', 'United Kingdom', 'Italy'],\n      preDefaultCountrys: [],\n\n      selectCountry: null,\n      allCountries: false,\n      populationByName: null,\n\n      data: [{\n        name: 'test',\n        values: 100\n      }\n      ]\n\n    }\n  }\n  //2ยบ\n  componentWillMount() {\n\n  }\n\n  //4ยบ\n  /**\n   * Call api to get Data.\n   */\n  componentDidMount() {\n    this.renderPopNamesPosts();\n\n  }\n\n\n\n  renderPopNamesPosts = async () => {\n    try {\n      //POP COUNTRY NAMEs\n      let popCountryNames = await fetch(\"https://world-population.p.rapidapi.com/allcountriesname\", {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"world-population.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"bee141dc14msh3225042bb118bccp1c99b6jsn3f35db537531\"\n        }\n      })\n        .then(response => response.json())\n        .then(data => { return data })\n        .catch(err => console.log(err));\n\n      // console.log(popCountryNames);\n\n      this.setState({ popCountryNamesData: popCountryNames.body.countries });\n      this.renderCovidPosts();\n\n\n    } catch (err) {\n\n    }\n\n  }\n\n  renderCovidPosts = async () => {\n    try {\n\n      //COVID DATA\n      let json = await fetch('https://api.covid19api.com/summary')\n        .then(response => response.json())\n        .then(data => {\n          return data.Countries\n        })\n        .catch(err => console.log(err));\n\n      this.setState({ covidAllData: json });\n\n      json.map((item) => {\n        this.getPopulationByName(item);\n      });\n\n\n    } catch (err) {\n\n    }\n\n  }\n\n\n  getPopulationByName = async (item) => {\n\n    var name = item.Country;\n    this.state.popCountryNamesData.map((n) => {\n      if (name.startsWith(n)) {\n        this.setState({ populationByName: n });\n        return;\n      }\n\n    });\n\n    if (typeof this.state.populationByName == 'undefined' && null === this.state.populationByName) {\n      return;\n    }\n\n    try {\n      let res = await fetch(\"https://world-population.p.rapidapi.com/population?country_name=\" + this.state.populationByName, {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"world-population.p.rapidapi.com\",\n          \"x-rapidapi-key\": \"bee141dc14msh3225042bb118bccp1c99b6jsn3f35db537531\"\n        }\n      })\n        .then(response => response.json())\n        .then(data => { return data })\n        .catch(err => console.log(err));\n\n      item.pop = res.body.population;\n      this.state.covidAllData.push(item);\n      this.setState({ covidAllData: this.state.covidAllData, populationByName: null });\n\n      this.buildpreDefaultCountrys();\n\n    } catch (error) {\n\n    }\n  }\n\n  selectCountry = (event) => {\n    if (typeof this.state.covidAllData != 'undefined' && this.state.covidAllData.length > 0) {\n      this.state.covidAllData.map((item) => {\n        if (item.Country === event.target.value) {\n          const contains = this.state.preDefaultCountrys.some((pre) => (pre === item));\n          if (!contains) {\n            this.state.preDefaultCountrysNames.push(event.target.value);\n            this.state.preDefaultCountrys.push(item);\n            this.setState({\n              preDefaultCountrysNames: this.state.preDefaultCountrysNames,\n              preDefaultCountrys: this.state.preDefaultCountrys\n            });\n          }\n        }\n      });\n    }\n  }\n\n  buildpreDefaultCountrys = () => {\n    if (typeof this.state.preDefaultCountrysNames != 'undefined' && this.state.preDefaultCountrysNames.length > 0) {\n      this.state.preDefaultCountrysNames.map((preItem) => {\n        this.state.covidAllData.map((item) => {\n          if (item.Country === preItem) {\n            const contains = this.state.preDefaultCountrys.some((pre) => (pre === item));\n            if (!contains) {\n              this.state.preDefaultCountrys.push(item);\n              this.setState({\n                preDefaultCountrys: this.state.preDefaultCountrys\n              });\n            }\n          }\n        });\n      });\n    }\n  }\n\n  removeCountry = (item) => {\n    this.setState({\n      preDefaultCountrysNames: this.state.preDefaultCountrysNames.filter(function (str) {\n        return str !== item.Country\n      }),\n      preDefaultCountrys: this.state.preDefaultCountrys.filter(function (str) {\n        return str !== item\n      })\n    });\n\n  }\n\n\n  //3ยบ\n  render() {\n\n    return (\n\n\n      <div>\n        <div className=\"hedaer-div\">\n\n          <label className=\"title\">COVID-19 Real Time</label>\n\n\n          <div className=\"selectCoutry\">\n            <select\n              className=\"selectBox\"\n              onChange={this.selectCountry}\n              disabled={this.state.allCountries}\n            >\n              {this.state.covidAllData.map(item => (\n                <option>{item.Country}</option>\n              ))}\n            </select>\n\n            <div class=\"custom-control custom-checkbox\" >\n              <input type=\"checkbox\" class=\"custom-control-input\" id=\"defaultUnchecked\" onChange={() => this.setState({ allCountries: !this.state.allCountries })} />\n              <label class=\"custom-control-label\" for=\"defaultUnchecked\">All Countries</label>\n            </div>\n          </div>\n\n\n\n        </div>\n\n\n        <Table className={this.buildClassName()} responsive>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Country</th>\n              <th>Total Population</th>\n              <th>Total Cases</th>\n              <th>Total Recover</th>\n              <th>Total Deaths</th>\n\n              <th>(%) Recover</th>\n              <th>(%) Deaths</th>\n\n              <th>(%) Recover Population</th>\n              <th>(%) Deaths Population</th>\n\n              <th>(%) Recover 1M</th>\n              <th>(%) Deaths 1M</th>\n              <th></th>\n\n\n            </tr>\n          </thead>\n          <tbody>\n\n            {\n\n              this.state.allCountries ?\n                // All Countries\n                (this.state.covidAllData !== undefined\n                  && this.state.covidAllData.length > 0) ?\n                  this.state.covidAllData.map((item, index) =>\n                    this.tableBody(item, index)\n                  )\n                  : <tr><td colSpan=\"5\">Loading...</td></tr>\n\n                :\n                // specific Countries\n                (this.state.preDefaultCountrysNames !== undefined\n                  && this.state.preDefaultCountrysNames.length > 0) ?\n\n                  this.state.preDefaultCountrys.map((item, index) =>\n\n                    this.tableBody(item, index)\n\n                  )\n\n\n                  :\n                  <tr><td colSpan=\"5\">Loading...</td></tr>\n\n            }\n\n\n\n\n          </tbody>\n        </Table>\n\n        <div>\n        {/* < RatingStats \n        ratings={[20, 25, 12, 7, 3]} ratingAverage={3.8} raterCount={67} \n        /> */}\n        </div>\n        <Button onClick={() => this.click()}>show Data</Button>\n\n      </div >\n    );\n  }\n\n  click() {\n    console.log(this.state);\n  }\n  tableBody = (item, index) => {\n\n    return (\n      < tr >\n        <td>{index}</td>\n        <td>{item.Country}</td>\n        <td>{item.pop !== null && typeof item.pop != 'undefined' ? item.pop : \"\"}</td>\n        <td>{item.TotalConfirmed}</td>\n        <td>{item.TotalRecovered}</td>\n        <td>{item.TotalDeaths}</td>\n\n        <td>{((item.TotalRecovered / item.TotalConfirmed) * 100).toFixed(2) + \"%\"}</td>\n        <td>{((item.TotalDeaths / item.TotalConfirmed) * 100).toFixed(2) + \"%\"}  </td>\n\n        {/* ( % )Recover By Population */}\n        <td>{\n          item.pop !== null && typeof item.pop != 'undefined' ?\n            ((item.TotalRecovered / item.pop) * 100).toFixed(2) + \"%\"\n            : \"\"\n        }</td>\n\n        {/* ( % )Deaths By Population */}\n        <td>{\n          item.pop !== null && typeof item.pop != 'undefined' ?\n            ((item.TotalDeaths / item.pop) * 100).toFixed(2) + \"%\"\n            : \"\"\n        }</td>\n\n        {/* ( % )Recover By 1M */}\n        <td>{((item.TotalDeaths / 1000000) * 100).toFixed(2) + \"%\"}</td>\n\n        {/* ( % )Deaths By 1M */}\n        <td>{((item.TotalDeaths / 1000000) * 100).toFixed(2) + \"%\"}</td>\n        {\n          !this.state.allCountries ?\n            <td> <Button className='btn btn-danger' onClick={() => this.removeCountry(item)}>X</Button></td>\n            : null\n        }\n      </tr>\n    )\n  }\n\n  buildClassName = () => {\n    if (this.state.allCountries || this.state.preDefaultCountrys.length > 10) {\n      return \"mapping_table\";\n    } else {\n      return \"\";\n    }\n  }\n\n\n} export default App;\n\n\n// {\n//   \"ok\": true,\n//   \"body\": {\n//     \"country_name\": \"Spain\",\n//     \"population\": 46754778,\n//     \"ranking\": 30,\n//     \"world_share\": 0.5998202078787502\n//   }\n// }\n\n\n// {\n//   \"Country\": \"Portugal\",\n//   \"CountryCode\": \"PT\",\n//   \"Slug\": \"portugal\",\n//   \"NewConfirmed\": 0,\n//   \"TotalConfirmed\": 26182,\n//   \"NewDeaths\": 0,\n//   \"TotalDeaths\": 1089,\n//   \"NewRecovered\": 0,\n//   \"TotalRecovered\": 2076,\n//   \"Date\": \"2020-05-07T12:35:36Z\"\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}